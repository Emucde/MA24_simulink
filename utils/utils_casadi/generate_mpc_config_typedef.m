function generate_mpc_config_typedef(filename, structName)
    % Default filename if not provided
    if nargin < 1 || isempty(filename)
        filename = 'mpc_config.h';
    end

    filename_fin = filename;
    filename = [filename_fin, '_tmp'];
    
    % Default struct name if not provided
    if nargin < 2 || isempty(structName)
        structName = 'mpc_config';
    end

    % Open the file for writing
    fid = fopen(filename, 'w');

    % Check if the file opened successfully
    if fid == -1
        error('Error opening file: %s', filename);
    end

    fprintf(fid, '/* Automatically generated by MATLAB (generate_mpc_config_typedef.m) */\n');
    fprintf(fid, '/* Do not edit this file. To regenerate, run "mpc_casdadi_main.m" with "generate_realtime_udp_c_fun=true" */\n\n');

    % Write the header guard
    fprintf(fid, '#ifndef %s_H\n', upper(structName));
    fprintf(fid, '#define %s_H\n\n', upper(structName));

    fprintf(fid, '#ifdef __cplusplus\n');
    fprintf(fid, 'extern "C" {\n');
    fprintf(fid, '#endif\n\n');

    % Write necessary includes
    fprintf(fid, '#include "casadi_types.h"\n\n');

    % mpc input config struct
    fprintf(fid, 'typedef struct {\n');
    fprintf(fid, '    const casadi_uint x_k_addr;\n');
    fprintf(fid, '    const casadi_uint x_k_len;\n');
    fprintf(fid, '    const casadi_uint t_k_addr;\n');
    fprintf(fid, '    const casadi_uint t_k_len;\n');
    fprintf(fid, '    const casadi_uint z_k_addr;\n');
    fprintf(fid, '    const casadi_uint z_k_len;\n');
    fprintf(fid, '    const casadi_uint y_d_addr;\n');
    fprintf(fid, '    const casadi_uint y_d_len;\n');
    fprintf(fid, '    const casadi_uint y_d_p_addr;\n');
    fprintf(fid, '    const casadi_uint y_d_p_len;\n');
    fprintf(fid, '    const casadi_uint y_d_pp_addr;\n');
    fprintf(fid, '    const casadi_uint y_d_pp_len;\n');
    fprintf(fid, '    const casadi_uint x_prev_addr;\n');
    fprintf(fid, '    const casadi_uint x_prev_len;\n');
    fprintf(fid, '    const casadi_uint z_prev_addr;\n');
    fprintf(fid, '    const casadi_uint z_prev_len;\n');
    fprintf(fid, '    const casadi_uint u_prev_addr;\n');
    fprintf(fid, '    const casadi_uint u_prev_len;\n');
    fprintf(fid, '    const casadi_uint alpha_prev_addr;\n');
    fprintf(fid, '    const casadi_uint alpha_prev_len;\n');
    fprintf(fid, '    const casadi_uint theta_prev_addr;\n');
    fprintf(fid, '    const casadi_uint theta_prev_len;\n');
    fprintf(fid, '    const casadi_uint traj_select_addr;\n');
    fprintf(fid, '    const casadi_uint traj_select_len;\n');
    fprintf(fid, '    const casadi_uint u_addr;\n');
    fprintf(fid, '    const casadi_uint u_len;\n');
    fprintf(fid, '    const casadi_uint v_addr;\n');
    fprintf(fid, '    const casadi_uint v_len;\n');
    fprintf(fid, '    const casadi_uint x_addr;\n');
    fprintf(fid, '    const casadi_uint x_len;\n');
    fprintf(fid, '    const casadi_uint z_addr;\n');
    fprintf(fid, '    const casadi_uint z_len;\n');
    fprintf(fid, '    const casadi_uint alpha_addr;\n');
    fprintf(fid, '    const casadi_uint alpha_len;\n');
    fprintf(fid, '    const casadi_uint theta_addr;\n');
    fprintf(fid, '    const casadi_uint theta_len;\n');
    fprintf(fid, '    const casadi_uint lambda_u_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_u_len;\n');
    fprintf(fid, '    const casadi_uint lambda_v_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_v_len;\n');
    fprintf(fid, '    const casadi_uint lambda_x_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_x_len;\n');
    fprintf(fid, '    const casadi_uint lambda_z_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_z_len;\n');
    fprintf(fid, '    const casadi_uint lambda_alpha_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_alpha_len;\n');
    fprintf(fid, '    const casadi_uint lambda_theta_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_theta_len;\n');
    fprintf(fid, '    const casadi_uint g_addr;\n');
    fprintf(fid, '    const casadi_uint g_len;\n');
    fprintf(fid, '    const casadi_uint Q_y_addr;\n');
    fprintf(fid, '    const casadi_uint Q_y_len;\n');
    fprintf(fid, '    const casadi_uint Q_yN_addr;\n');
    fprintf(fid, '    const casadi_uint Q_yN_len;\n');
    fprintf(fid, '    const casadi_uint epsilon_t_addr;\n');
    fprintf(fid, '    const casadi_uint epsilon_t_len;\n');
    fprintf(fid, '    const casadi_uint epsilon_r_addr;\n');
    fprintf(fid, '    const casadi_uint epsilon_r_len;\n');
    fprintf(fid, '    const casadi_uint Q_y_ref_addr;\n');
    fprintf(fid, '    const casadi_uint Q_y_ref_len;\n');
    fprintf(fid, '    const casadi_uint Q_y_p_ref_addr;\n');
    fprintf(fid, '    const casadi_uint Q_y_p_ref_len;\n');
    fprintf(fid, '    const casadi_uint Q_theta_addr;\n');
    fprintf(fid, '    const casadi_uint Q_theta_len;\n');
    fprintf(fid, '    const casadi_uint Q_thetaN_addr;\n');
    fprintf(fid, '    const casadi_uint Q_thetaN_len;\n');
    fprintf(fid, '    const casadi_uint R_q_ref_addr;\n');
    fprintf(fid, '    const casadi_uint R_q_ref_len;\n');
    fprintf(fid, '    const casadi_uint R_q_p_addr;\n');
    fprintf(fid, '    const casadi_uint R_q_p_len;\n');
    fprintf(fid, '    const casadi_uint R_u_addr;\n');
    fprintf(fid, '    const casadi_uint R_u_len;\n');
    fprintf(fid, '    const casadi_uint R_alpha_addr;\n');
    fprintf(fid, '    const casadi_uint R_alpha_len;\n');
    fprintf(fid, '    const casadi_uint R_v_addr;\n');
    fprintf(fid, '    const casadi_uint R_v_len;\n');
    fprintf(fid, '    const casadi_uint R_x_prev_addr;\n');
    fprintf(fid, '    const casadi_uint R_x_prev_len;\n');
    fprintf(fid, '    const casadi_uint R_z_prev_addr;\n');
    fprintf(fid, '    const casadi_uint R_z_prev_len;\n');
    fprintf(fid, '    const casadi_uint R_alpha_prev_addr;\n');
    fprintf(fid, '    const casadi_uint R_alpha_prev_len;\n');
    fprintf(fid, '    const casadi_uint R_u0_prev_addr;\n');
    fprintf(fid, '    const casadi_uint R_u0_prev_len;\n');
    fprintf(fid, '    const casadi_uint R_theta_prev_addr;\n');
    fprintf(fid, '    const casadi_uint R_theta_prev_len;\n');
    fprintf(fid, '    const casadi_uint lambda_u_ew_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_u_ew_len;\n');
    fprintf(fid, '    const casadi_uint max_du_addr;\n');
    fprintf(fid, '    const casadi_uint max_du_len;\n');
    fprintf(fid, '    const casadi_uint q_ref_addr;\n');
    fprintf(fid, '    const casadi_uint q_ref_len;\n');
    fprintf(fid, '    const casadi_uint x_min_addr;\n');
    fprintf(fid, '    const casadi_uint x_min_len;\n');
    fprintf(fid, '    const casadi_uint x_max_addr;\n');
    fprintf(fid, '    const casadi_uint x_max_len;\n');
    fprintf(fid, '    const casadi_uint u_min_addr;\n');
    fprintf(fid, '    const casadi_uint u_min_len;\n');
    fprintf(fid, '    const casadi_uint u_max_addr;\n');
    fprintf(fid, '    const casadi_uint u_max_len;\n');
    fprintf(fid, '    const casadi_uint v_min_addr;\n');
    fprintf(fid, '    const casadi_uint v_min_len;\n');
    fprintf(fid, '    const casadi_uint v_max_addr;\n');
    fprintf(fid, '    const casadi_uint v_max_len;\n');
    fprintf(fid, '    const casadi_uint reference_values_addr;\n');
    fprintf(fid, '    const casadi_uint reference_values_len;\n');
    fprintf(fid, '    const casadi_uint init_guess_addr;\n');
    fprintf(fid, '    const casadi_uint init_guess_len;\n');
    fprintf(fid, '    const casadi_uint param_weight_addr;\n');
    fprintf(fid, '    const casadi_uint param_weight_len;\n');
    fprintf(fid, '} mpc_input_config_t;\n\n');

    % % mpc output config struct
    fprintf(fid, 'typedef struct {\n');
    fprintf(fid, '    const casadi_uint u_opt_addr;\n');
    fprintf(fid, '    const casadi_uint u_opt_len;\n');
    fprintf(fid, '    const casadi_uint u_out_addr;\n');
    fprintf(fid, '    const casadi_uint u_out_len;\n');
    fprintf(fid, '    const casadi_uint v_out_addr;\n');
    fprintf(fid, '    const casadi_uint v_out_len;\n');
    fprintf(fid, '    const casadi_uint x_out_addr;\n');
    fprintf(fid, '    const casadi_uint x_out_len;\n');
    fprintf(fid, '    const casadi_uint z_out_addr;\n');
    fprintf(fid, '    const casadi_uint z_out_len;\n');
    fprintf(fid, '    const casadi_uint alpha_out_addr;\n');
    fprintf(fid, '    const casadi_uint alpha_out_len;\n');
    fprintf(fid, '    const casadi_uint theta_out_addr;\n');
    fprintf(fid, '    const casadi_uint theta_out_len;\n');
    fprintf(fid, '    const casadi_uint lambda_u_out_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_u_out_len;\n');
    fprintf(fid, '    const casadi_uint lambda_v_out_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_v_out_len;\n');
    fprintf(fid, '    const casadi_uint lambda_x_out_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_x_out_len;\n');
    fprintf(fid, '    const casadi_uint lambda_theta_out_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_theta_out_len;\n');
    fprintf(fid, '    const casadi_uint lambda_z_out_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_z_out_len;\n');
    fprintf(fid, '    const casadi_uint lambda_alpha_out_addr;\n');
    fprintf(fid, '    const casadi_uint lambda_alpha_out_len;\n');
    fprintf(fid, '    const casadi_uint g_out_addr;\n');
    fprintf(fid, '    const casadi_uint g_out_len;\n');
    fprintf(fid, '    const casadi_uint J_yt_addr;\n');
    fprintf(fid, '    const casadi_uint J_yt_len;\n');
    fprintf(fid, '    const casadi_uint J_yt_N_addr;\n');
    fprintf(fid, '    const casadi_uint J_yt_N_len;\n');
    fprintf(fid, '    const casadi_uint J_yr_addr;\n');
    fprintf(fid, '    const casadi_uint J_yr_len;\n');
    fprintf(fid, '    const casadi_uint J_yr_N_addr;\n');
    fprintf(fid, '    const casadi_uint J_yr_N_len;\n');
    fprintf(fid, '    const casadi_uint J_u_addr;\n');
    fprintf(fid, '    const casadi_uint J_u_len;\n');
    fprintf(fid, '    const casadi_uint J_v_addr;\n');
    fprintf(fid, '    const casadi_uint J_v_len;\n');
    fprintf(fid, '    const casadi_uint J_q_ref_addr;\n');
    fprintf(fid, '    const casadi_uint J_q_ref_len;\n');
    fprintf(fid, '    const casadi_uint J_q_p_addr;\n');
    fprintf(fid, '    const casadi_uint J_q_p_len;\n');
    fprintf(fid, '    const casadi_uint J_theta_addr;\n');
    fprintf(fid, '    const casadi_uint J_theta_len;\n');
    fprintf(fid, '    const casadi_uint J_thetaN_addr;\n');
    fprintf(fid, '    const casadi_uint J_thetaN_len;\n');
    fprintf(fid, '    const casadi_uint J_alpha_addr;\n');
    fprintf(fid, '    const casadi_uint J_alpha_len;\n');
    fprintf(fid, '    const casadi_uint J_x_prev_addr;\n');
    fprintf(fid, '    const casadi_uint J_x_prev_len;\n');
    fprintf(fid, '    const casadi_uint J_theta_prev_addr;\n');
    fprintf(fid, '    const casadi_uint J_theta_prev_len;\n');
    fprintf(fid, '    const casadi_uint J_z_prev_addr;\n');
    fprintf(fid, '    const casadi_uint J_z_prev_len;\n');
    fprintf(fid, '    const casadi_uint J_alpha_prev_addr;\n');
    fprintf(fid, '    const casadi_uint J_alpha_prev_len;\n');
    fprintf(fid, '    const casadi_uint J_u0_prev_addr;\n');
    fprintf(fid, '    const casadi_uint J_u0_prev_len;\n');
    fprintf(fid, '} mpc_output_config_t;\n\n');


    % Write the struct definition with typedef
    fprintf(fid, 'typedef struct {\n');
    fprintf(fid, '    const casadi_real dt;\n');
    fprintf(fid, '    const casadi_uint kinematic_mpc;\n');
    fprintf(fid, '    const casadi_uint traj_data_per_horizon;\n');
    fprintf(fid, '    const casadi_uint* traj_indices;\n');
    fprintf(fid, '    casadi_uint y_d_len;\n');
    fprintf(fid, '    casadi_uint init_guess_len;\n');
    fprintf(fid, '    casadi_uint x_k_addr;\n');
    fprintf(fid, '    casadi_uint y_d_addr;\n');
    fprintf(fid, '    casadi_uint in_init_guess_addr;\n');
    fprintf(fid, '    casadi_uint out_init_guess_addr;\n');
    fprintf(fid, '    casadi_uint in_param_weight_addr;\n');
    fprintf(fid, '    const casadi_real* param_weight;\n');
    fprintf(fid, '    casadi_uint param_weight_len;\n');
    fprintf(fid, '    CasadiFunPtr_t casadi_fun;\n');
    fprintf(fid, '    const casadi_real** arg;\n');
    fprintf(fid, '    casadi_real** res;\n');
    fprintf(fid, '    casadi_int* iw;\n');
    fprintf(fid, '    casadi_real* w;\n');
    fprintf(fid, '    const casadi_uint* arg_indices;\n');
    fprintf(fid, '    const casadi_uint* res_indices;\n');
    fprintf(fid, '    casadi_uint arg_in_len;\n');
    fprintf(fid, '    casadi_uint res_out_len;\n');
    fprintf(fid, '    casadi_uint u_opt_len;\n');
    fprintf(fid, '    casadi_uint w_end_addr;\n');
    fprintf(fid, '    casadi_uint u_opt_addr;\n');
    fprintf(fid, '    int mem;\n');
    fprintf(fid, '    const mpc_input_config_t input_config;\n');
    fprintf(fid, '    const mpc_output_config_t output_config;\n');
    fprintf(fid, '} %s_t;\n\n', structName);

    fprintf(fid, '#ifdef __cplusplus\n');
    fprintf(fid, '}\n');
    fprintf(fid, '#endif\n\n');

    % Close the header guard
    fprintf(fid, '#endif // %s_H\n', upper(structName));

    % Close the file
    fclose(fid);

    % Check whether Header file was changed
    if ~exist(filename_fin, 'file') || ~isequal(fileread(filename), fileread(filename_fin))
        movefile(filename, filename_fin, 'f');
        fprintf(2, 'Header file %s has been updated.\n', filename_fin);
    else
        fprintf('Header file %s unchanged.\n', filename_fin);
        delete(filename);
    end
end