function generate_mpc_config_typedef(filename, structName)
    % Default filename if not provided
    if nargin < 1 || isempty(filename)
        filename = 'mpc_config.h';
    end
    
    % Default struct name if not provided
    if nargin < 2 || isempty(structName)
        structName = 'mpc_config';
    end

    % Open the file for writing
    fid = fopen(filename, 'w');

    % Check if the file opened successfully
    if fid == -1
        error('Error opening file: %s', filename);
    end

    fprintf(fid, '/* Automatically generated by MATLAB (generate_mpc_config_typedef.m) */\n');
    fprintf(fid, '/* Do not edit this file. To regenerate, run "mpc_casdadi_main.m" with "generate_realtime_udp_c_fun=true" */\n\n');

    % Write the header guard
    fprintf(fid, '#ifndef %s_H\n', upper(structName));
    fprintf(fid, '#define %s_H\n\n', upper(structName));

    fprintf(fid, '#ifdef __cplusplus\n');
    fprintf(fid, 'extern "C" {\n');
    fprintf(fid, '#endif\n\n');

    % Write necessary includes
    fprintf(fid, '#include "casadi_types.h"\n\n');

    % Write the struct definition with typedef
    fprintf(fid, 'typedef struct {\n');
    fprintf(fid, '    const casadi_real dt;\n');
    fprintf(fid, '    const casadi_uint kinematic_mpc;\n');
    fprintf(fid, '    const char* x0_init_path;\n');
    fprintf(fid, '    const char* init_guess_path;\n');
    fprintf(fid, '    const char* traj_data_path;\n');
    fprintf(fid, '    const casadi_uint traj_data_per_horizon;\n');
    fprintf(fid, '    const casadi_uint traj_data_real_len;\n');
    fprintf(fid, '    const casadi_uint* traj_indices;\n');
    fprintf(fid, '    casadi_uint y_d_len;\n');
    fprintf(fid, '    casadi_uint init_guess_len;\n');
    fprintf(fid, '    casadi_uint x_k_addr;\n');
    fprintf(fid, '    casadi_uint y_d_addr;\n');
    fprintf(fid, '    casadi_uint in_init_guess_addr;\n');
    fprintf(fid, '    casadi_uint out_init_guess_addr;\n');
    fprintf(fid, '    casadi_uint in_param_weight_addr;\n');
    fprintf(fid, '    const casadi_real* param_weight;\n');
    fprintf(fid, '    casadi_uint param_weight_len;\n');
    fprintf(fid, '    CasadiFunPtr_t casadi_fun;\n');
    fprintf(fid, '    const casadi_real** arg;\n');
    fprintf(fid, '    casadi_real** res;\n');
    fprintf(fid, '    casadi_int* iw;\n');
    fprintf(fid, '    casadi_real* w;\n');
    fprintf(fid, '    const casadi_uint* arg_indices;\n');
    fprintf(fid, '    const casadi_uint* res_indices;\n');
    fprintf(fid, '    casadi_uint arg_in_len;\n');
    fprintf(fid, '    casadi_uint res_out_len;\n');
    fprintf(fid, '    casadi_uint u_opt_len;\n');
    fprintf(fid, '    casadi_uint w_end_addr;\n');
    fprintf(fid, '    casadi_uint u_opt_addr;\n');
    fprintf(fid, '    int mem;\n');
    fprintf(fid, '} %s_t;\n\n', structName);

    fprintf(fid, '#ifdef __cplusplus\n');
    fprintf(fid, '}\n');
    fprintf(fid, '#endif\n\n');

    % Close the header guard
    fprintf(fid, '#endif // %s_H\n', upper(structName));

    % Close the file
    fclose(fid);

    fprintf('Header file "%s" has been created successfully.\n', filename);
end