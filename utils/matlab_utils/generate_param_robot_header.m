function generate_param_robot_header(filepath, param_robot)
    fid = fopen(filepath, 'w');
    if fid == -1
        error('Cannot open file: %s', filepath);
    end

    fprintf(fid, '/* Automatically generated by MATLAB (generate_param_robot_header.m) */\n');
    fprintf(fid, '/* Do not edit this file. To regenerate, run "mpc_casdadi_main.m" with "generate_realtime_udp_c_fun=true" */\n\n');

    func_name = 'PARAM_ROBOT';

    % Write the header guard
    fprintf(fid, ['#ifndef ', func_name, '_PARAM_H\n']);
    fprintf(fid, ['#define ', func_name, '_PARAM_H\n\n']);

    fprintf(fid, '#ifdef __cplusplus\n');
    fprintf(fid, 'extern "C" {\n');
    fprintf(fid, '#endif\n\n');

    % Include necessary headers
    fprintf(fid, '#include "casadi_types.h"\n\n');

    field_names = fieldnames(param_robot);
    for i = 1:length(field_names)
        field = field_names{i};
        field_data = param_robot.(field);
        if isscalar(field_data) && (isnumeric(field_data) || islogical(field_data))
            if(contains(field, 'indices'))
                fprintf(fid, 'static const casadi_uint %s_%s[] = {%d};\n', func_name, upper(field), field_data-1); % matlab starts from 1, C from 0
            else
                fprintf(fid, '#define %s_%s %g\n', func_name, upper(field), field_data);
            end
        elseif ischar(field_data) % then it must be string
            fprintf(fid, '#define %s_%s "%s"\n', func_name, upper(field), field_data);
        elseif ismatrix(field_data)
            if contains(field, 'indices')
                field_data = field_data - 1; % matlab starts from 1, C from 0
                fprintf(fid, 'static const casadi_uint %s_%s[] = {', func_name, upper(field));
            else
                fprintf(fid, 'static const casadi_real %s_%s[] = {', func_name, upper(field));
            end
            fprintf(fid, '%d,', field_data(1:end-1));
            fprintf(fid, '%d};\n', field_data(end));
        else
            error('field data is neither numeric, integer nor matrix: %s', field_data);
        end
    end

    fprintf(fid, '\n#ifdef __cplusplus\n');
    fprintf(fid, '}\n');
    fprintf(fid, '#endif\n\n');

    fprintf(fid, '#endif /* %s_PARAM_H */\n', func_name);

    fclose(fid);
end