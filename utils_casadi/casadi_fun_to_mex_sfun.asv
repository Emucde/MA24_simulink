function compile_casadi_sfunction(s_fun_path, casadi_func_name, MPC_solver, mode)
% COMPILE_CASADI_SFUNCTION Compiles a CasADi S-function for use in Simulink.
%
% Inputs:
%   s_fun_path      : Path to the directory containing the S-function source files.
%   casadi_func_name: Name of the CasADi function to be compiled.
%   MPC_solver      : Name of the MPC solver to be used (optional, for display only).
%   mode            : Compile Mode with different s_function file
%                   :   mode = 1: use default nlpsol s_function "s_function_nlpsol.c" [from [1]]
%                   :   mode = 2: use default opti s_function "s_function.c" from [2, 3]
%
% Dependencies:
%   - Assumes a custom function 'replace_strings_in_casadi_file' is available.
% 
% Sources:
% [1] https://web.casadi.org/blog/mpc-simulink2/
% [2] https://web.casadi.org/blog/s-function/
% [3] https://github.com/casadi/casadi/discussions/3337

if(mode == 1)
    % Copy and modify the C source file
    copyfile(strcat(s_fun_path, 's_function_nlpsol.c'), s_fun_c_file_path, 'f');
    replace_strings_in_casadi_file(s_fun_c_file_path, casadi_func_name);
    
    % Save the CasADi function
    f_opt.save([s_fun_path casadi_func_name, '.casadi']);
    
    % Get paths to CasADi libraries and headers
    lib_path = GlobalOptions.getCasadiPath();
    inc_path = GlobalOptions.getCasadiIncludePath();
    
    % Compile the S-function
    tic;
    disp("Compiling Simulink " + s_func_name + " (nlpsol, solver="+MPC_solver+") ");
    mex(['-I' inc_path],['-L' lib_path],'-lcasadi', s_fun_c_file_path, '-output', s_fun_c_file_path);
    disp(['Compile time for casadi s-function (nlpsol): ', num2str(toc), ' s']);
    
    % Set the final S-function name (optional)
    % s_func_name = strcat('s_function_', casadi_func_name, '.c');

elseif(mode == 2)
    function mex_name = casadi_fun_to_mex_sfun(casadi_fun, dir, opt_flag)
        
    
        % src: https://github.com/casadi/casadi/discussions/3337
        % Optimization options for MATLAB compilation
        
        % Level  | Execution Time             | Code Size | Memory Usage | Compile Time
        %--------|----------------------------|-----------|--------------|--------------
        % -O0    | Default (no opt) (slow)    |           |              |      (+0%   )
        % -O1    | Balanced (size/time)       | ++        | ++           | ++   (+340% )
        % -O2    | More emphasis (size/time)  | ++        | +++          | +++  (+540% )
        % -O3    | Most emphasis (size/time)  | ---       | +++          | ++++ (+1860%)
        % -Os    | Optimize for code size     | ++        | --           | ++   (+400% )
        % -Ofast | Similar to -O3 (fast math) | +++       | +++          | ++++ (+2180%)
        arguments
            casadi_fun (1,1) casadi.Function
            dir char
            opt_flag = '-O3'
        end
    
        import casadi.*;
        casadi_func_name = casadi_fun.name;
    
        disp(['Compiling Matlab s-function ', casadi_func_name, ' with ',opt_flag])
        
        mex_name = casadi_func_name;
        full_name = [dir, '/', mex_name, '.c'];
        opts = struct('main', true, ...
            'mex', true);
        casadi_fun.generate(mex_name, opts);
        if ~strcmp(dir,pwd)
            movefile([mex_name,'.c'], dir);
        end
    
        %mex(full_name, '-largeArrayDims', ['COPTIMFLAGS="',opt_flag,'"']);
    
        cg_options = struct;
        cg_options.casadi_real = 'real_T';
        cg_options.real_min = num2str(eps);
        cg_options.casadi_int = 'int_T';
        cg_options.with_header = true;
        cg = CodeGenerator(casadi_func_name, cg_options);
        cg.add_include('simstruc.h');
        cg.add(casadi_fun);
        cg.generate();
        c_header_name = [casadi_func_name, '.c'];
        h_header_name = [casadi_func_name, '.h'];
        s_fun_path = [dir, '/'];
        casadi_fun_c_header_path = [s_fun_path, c_header_name];
        casadi_fun_h_header_path = [s_fun_path, h_header_name];
    
        movefile(c_header_name, dir);
        movefile([casadi_func_name, '.h'], dir);
    
        s_func_name = ['s_function_', c_header_name];
        s_func_matlab_file = [s_fun_path, s_func_name];
        copyfile([s_fun_path, 's_function.c'], s_func_matlab_file, 'f');
        replace_strings_in_casadi_file(s_func_matlab_file, casadi_func_name);
    
        %mex(s_func_matlab_file, casadi_fun_c_header_path, '-outdir', s_fun_path);
        mex(s_func_matlab_file, casadi_fun_c_header_path, '-largeArrayDims', ['COPTIMFLAGS="',opt_flag,'"'], '-outdir', s_fun_path)
        
        delete(s_fun_c_file_path);
        delete(casadi_fun_h_header_path);
        delete(casadi_fun_c_header_path);
    else
        error('mode ')
    end